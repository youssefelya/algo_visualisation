{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/index.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","initialState1","createAction","handleActions","SET_ARRAY","state","payload","SET_CURRENT_HEAPTHREE","SET_CURRENT_SWAPPERS","concat","SET_RUNNING","SET_CURRENT_SORTED","SortingVisualizer","props","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","sort","a","b","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","testSortingAlgorithms","React","Component","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c121f18e.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import {createAction, handleActions} from 'redux-actions';\n\nexport function handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentHeapThree(array.map((num, index) => index)));\n    setTimeout(() => {\n      dispatch(setCurrentHeapThree([]));\n      dispatch(setRunning(false));\n    }, 900);\n    return;\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? setArray\n      : (toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') ||\n        !toDispatch[0].length\n      ? setCurrentSwappers\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? setCurrentSorted\n      : setCurrentHeapThree;\n  dispatch(dispatchFunction(toDispatch.shift()));\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed);\n  }, speed);\n}\nconst initialState1 = [];\nconst SET_ARRAY = 'SET_ARRAY';\nconst setArray = createAction(SET_ARRAY);\n\nconst array = handleActions(\n  {\n    SET_ARRAY: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_HEAPTHREE = 'SET_CURRENT_HEAPTHREE';\nconst setCurrentHeapThree = createAction(SET_CURRENT_HEAPTHREE);\n\nconst currentHeapThree = handleActions(\n  {\n    SET_CURRENT_HEAPTHREE: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SWAPPERS = 'SET_CURRENT_SWAPPERS';\nconst setCurrentSwappers = createAction(SET_CURRENT_SWAPPERS);\n\nconst currentSwappers = handleActions(\n  {\n    SET_CURRENT_SWAPPERS: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n\nconst SET_RUNNING = 'SET_RUNNING';\nconst setRunning = createAction(SET_RUNNING);\n\nconst isRunning = handleActions(\n  {\n    SET_RUNNING: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SORTED = 'SET_CURRENT_SORTED';\nconst setCurrentSorted = createAction(SET_CURRENT_SORTED);\n\nconst currentSorted = handleActions(\n  {\n    SET_CURRENT_SORTED: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {heapSort} from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport {selectSort} from '../sortingAlgorithms/algorithm/selectSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 300;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'blue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    let arraySorted = this.state.array.slice().sort((a, b) => a - b);\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 10; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      //   console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}