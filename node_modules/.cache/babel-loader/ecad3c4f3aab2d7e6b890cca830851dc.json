{"ast":null,"code":"//import {createAction, handleActions} from 'redux-actions';\nimport { createAction, handleActions } from 'redux-actions';\nexport function heapSort(stateArray, dispatch, speed) {\n  let array = stateArray.slice(0),\n      toDispatch = [];\n  buildMaxHeap(array, toDispatch);\n  let end = array.length - 1;\n\n  while (end > 0) {\n    toDispatch.push([0, end]);\n    let temp = array[end];\n    array[end] = array[0];\n    array[0] = temp;\n    toDispatch.push([0, end, true]);\n    toDispatch.push(array.slice(0));\n    toDispatch.push([]);\n    toDispatch.push([true, end]);\n    siftDown(array, 0, end, toDispatch);\n    end--;\n  }\n\n  toDispatch.push([true, end]);\n  handleDispatch(toDispatch, dispatch, array, speed);\n  return array;\n}\n\nfunction buildMaxHeap(array, toDispatch) {\n  let currentIndex = Math.floor(array.length / 2);\n\n  while (currentIndex >= 0) {\n    siftDown(array, currentIndex, array.length, toDispatch);\n    currentIndex--;\n  }\n}\n\nfunction siftDown(array, start, end, toDispatch) {\n  if (start >= Math.floor(end / 2)) {\n    return;\n  }\n\n  let left = start * 2 + 1,\n      right = start * 2 + 2 < end ? start * 2 + 2 : null,\n      swap;\n\n  if (right) {\n    toDispatch.push([start, left, right]);\n    swap = array[left] > array[right] ? left : right;\n  } else {\n    toDispatch.push([start, left]);\n    swap = left;\n  }\n\n  if (array[start] < array[swap]) {\n    let temp = array[swap];\n    array[swap] = array[start];\n    array[start] = temp;\n    toDispatch.push([start, swap, true]);\n    toDispatch.push(array.slice(0));\n    toDispatch.push([]);\n    siftDown(array, swap, end, toDispatch);\n  }\n}\n\nfunction handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentHeapThree(array.map((num, index) => index)));\n    setTimeout(() => {\n      dispatch(setCurrentHeapThree([]));\n      dispatch(setRunning(false));\n    }, 900);\n    return;\n  }\n\n  let dispatchFunction = toDispatch[0].length > 3 ? setArray : toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean' || !toDispatch[0].length ? setCurrentSwappers : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean' ? setCurrentSorted : setCurrentHeapThree;\n  dispatch(dispatchFunction(toDispatch.shift()));\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed);\n  }, speed);\n}\n\nconst initialState1 = [];\nconst SET_ARRAY = 'SET_ARRAY';\nconst setArray = createAction(SET_ARRAY);\nconst array = handleActions({\n  SET_ARRAY: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_HEAPTHREE = 'SET_CURRENT_HEAPTHREE';\nconst setCurrentHeapThree = createAction(SET_CURRENT_HEAPTHREE);\nconst currentHeapThree = handleActions({\n  SET_CURRENT_HEAPTHREE: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_SWAPPERS = 'SET_CURRENT_SWAPPERS';\nconst setCurrentSwappers = createAction(SET_CURRENT_SWAPPERS);\nconst currentSwappers = handleActions({\n  SET_CURRENT_SWAPPERS: (state, {\n    payload\n  }) => {\n    if (payload.length) {\n      return state.concat(payload);\n    } else {\n      return [];\n    }\n  }\n}, initialState1);\nconst SET_RUNNING = 'SET_RUNNING';\nconst setRunning = createAction(SET_RUNNING);\nconst isRunning = handleActions({\n  SET_RUNNING: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_SORTED = 'SET_CURRENT_SORTED';\nconst setCurrentSorted = createAction(SET_CURRENT_SORTED);\nconst currentSorted = handleActions({\n  SET_CURRENT_SORTED: (state, {\n    payload\n  }) => {\n    if (payload.length) {\n      return state.concat(payload);\n    } else {\n      return [];\n    }\n  }\n}, initialState1);","map":{"version":3,"sources":["C:/Users/Youssef/Desktop/Cr/visialisation/sorting-visualisation/src/sortingAlgorithms/heapSort.js"],"names":["createAction","handleActions","heapSort","stateArray","dispatch","speed","array","slice","toDispatch","buildMaxHeap","end","length","push","temp","siftDown","handleDispatch","currentIndex","Math","floor","start","left","right","swap","setCurrentHeapThree","map","num","index","setTimeout","setRunning","dispatchFunction","setArray","setCurrentSwappers","setCurrentSorted","shift","initialState1","SET_ARRAY","state","payload","SET_CURRENT_HEAPTHREE","currentHeapThree","SET_CURRENT_SWAPPERS","currentSwappers","concat","SET_RUNNING","isRunning","SET_CURRENT_SORTED","currentSorted"],"mappings":"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","sourcesContent":["//import {createAction, handleActions} from 'redux-actions';\nimport {createAction, handleActions} from 'redux-actions';\nexport function heapSort(stateArray, dispatch, speed) {\n  let array = stateArray.slice(0),\n    toDispatch = [];\n  buildMaxHeap(array, toDispatch);\n  let end = array.length - 1;\n  while (end > 0) {\n    toDispatch.push([0, end]);\n    let temp = array[end];\n    array[end] = array[0];\n    array[0] = temp;\n    toDispatch.push([0, end, true]);\n    toDispatch.push(array.slice(0));\n    toDispatch.push([]);\n    toDispatch.push([true, end]);\n    siftDown(array, 0, end, toDispatch);\n    end--;\n  }\n  toDispatch.push([true, end]);\n  handleDispatch(toDispatch, dispatch, array, speed);\n  return array;\n}\n\nfunction buildMaxHeap(array, toDispatch) {\n  let currentIndex = Math.floor(array.length / 2);\n  while (currentIndex >= 0) {\n    siftDown(array, currentIndex, array.length, toDispatch);\n    currentIndex--;\n  }\n}\n\nfunction siftDown(array, start, end, toDispatch) {\n  if (start >= Math.floor(end / 2)) {\n    return;\n  }\n  let left = start * 2 + 1,\n    right = start * 2 + 2 < end ? start * 2 + 2 : null,\n    swap;\n  if (right) {\n    toDispatch.push([start, left, right]);\n    swap = array[left] > array[right] ? left : right;\n  } else {\n    toDispatch.push([start, left]);\n    swap = left;\n  }\n  if (array[start] < array[swap]) {\n    let temp = array[swap];\n    array[swap] = array[start];\n    array[start] = temp;\n    toDispatch.push([start, swap, true]);\n    toDispatch.push(array.slice(0));\n    toDispatch.push([]);\n    siftDown(array, swap, end, toDispatch);\n  }\n}\n\nfunction handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentHeapThree(array.map((num, index) => index)));\n    setTimeout(() => {\n      dispatch(setCurrentHeapThree([]));\n      dispatch(setRunning(false));\n    }, 900);\n    return;\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? setArray\n      : (toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') ||\n        !toDispatch[0].length\n      ? setCurrentSwappers\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? setCurrentSorted\n      : setCurrentHeapThree;\n  dispatch(dispatchFunction(toDispatch.shift()));\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed);\n  }, speed);\n}\nconst initialState1 = [];\nconst SET_ARRAY = 'SET_ARRAY';\nconst setArray = createAction(SET_ARRAY);\n\nconst array = handleActions(\n  {\n    SET_ARRAY: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_HEAPTHREE = 'SET_CURRENT_HEAPTHREE';\nconst setCurrentHeapThree = createAction(SET_CURRENT_HEAPTHREE);\n\nconst currentHeapThree = handleActions(\n  {\n    SET_CURRENT_HEAPTHREE: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SWAPPERS = 'SET_CURRENT_SWAPPERS';\nconst setCurrentSwappers = createAction(SET_CURRENT_SWAPPERS);\n\nconst currentSwappers = handleActions(\n  {\n    SET_CURRENT_SWAPPERS: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n\nconst SET_RUNNING = 'SET_RUNNING';\nconst setRunning = createAction(SET_RUNNING);\n\nconst isRunning = handleActions(\n  {\n    SET_RUNNING: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SORTED = 'SET_CURRENT_SORTED';\nconst setCurrentSorted = createAction(SET_CURRENT_SORTED);\n\nconst currentSorted = handleActions(\n  {\n    SET_CURRENT_SORTED: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n"]},"metadata":{},"sourceType":"module"}