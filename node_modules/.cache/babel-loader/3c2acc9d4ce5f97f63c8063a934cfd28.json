{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nexport function handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentHeapThree(array.map((num, index) => index)));\n    setTimeout(() => {\n      dispatch(setCurrentHeapThree([]));\n      dispatch(setRunning(false));\n    }, 900);\n    return;\n  }\n\n  let dispatchFunction = toDispatch[0].length > 3 ? setArray : toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean' || !toDispatch[0].length ? setCurrentSwappers : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean' ? setCurrentSorted : setCurrentHeapThree;\n  dispatch(dispatchFunction(toDispatch.shift()));\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed);\n  }, speed);\n}\nconst initialState1 = [];\nconst SET_ARRAY = 'SET_ARRAY';\nconst setArray = createAction(SET_ARRAY);\nconst array = handleActions({\n  SET_ARRAY: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_HEAPTHREE = 'SET_CURRENT_HEAPTHREE';\nconst setCurrentHeapThree = createAction(SET_CURRENT_HEAPTHREE);\nconst currentHeapThree = handleActions({\n  SET_CURRENT_HEAPTHREE: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_SWAPPERS = 'SET_CURRENT_SWAPPERS';\nconst setCurrentSwappers = createAction(SET_CURRENT_SWAPPERS);\nconst currentSwappers = handleActions({\n  SET_CURRENT_SWAPPERS: (state, {\n    payload\n  }) => {\n    if (payload.length) {\n      return state.concat(payload);\n    } else {\n      return [];\n    }\n  }\n}, initialState1);\nconst SET_RUNNING = 'SET_RUNNING';\nconst setRunning = createAction(SET_RUNNING);\nconst isRunning = handleActions({\n  SET_RUNNING: (state, {\n    payload\n  }) => {\n    return payload;\n  }\n}, initialState1);\nconst SET_CURRENT_SORTED = 'SET_CURRENT_SORTED';\nconst setCurrentSorted = createAction(SET_CURRENT_SORTED);\nconst currentSorted = handleActions({\n  SET_CURRENT_SORTED: (state, {\n    payload\n  }) => {\n    if (payload.length) {\n      return state.concat(payload);\n    } else {\n      return [];\n    }\n  }\n}, initialState1);","map":{"version":3,"sources":["C:/Users/Youssef/Desktop/Cr/visialisation/sorting-visualisation/src/sortingAlgorithms/index.js"],"names":["createAction","handleActions","createStore","combineReducers","applyMiddleware","handleDispatch","toDispatch","dispatch","array","speed","length","setCurrentHeapThree","map","num","index","setTimeout","setRunning","dispatchFunction","setArray","setCurrentSwappers","setCurrentSorted","shift","initialState1","SET_ARRAY","state","payload","SET_CURRENT_HEAPTHREE","currentHeapThree","SET_CURRENT_SWAPPERS","currentSwappers","concat","SET_RUNNING","isRunning","SET_CURRENT_SORTED","currentSorted"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,KAA9C,EAAqDC,KAArD,EAA4D;AACjE,MAAI,CAACH,UAAU,CAACI,MAAhB,EAAwB;AACtBH,IAAAA,QAAQ,CAACI,mBAAmB,CAACH,KAAK,CAACI,GAAN,CAAU,CAACC,GAAD,EAAMC,KAAN,KAAgBA,KAA1B,CAAD,CAApB,CAAR;AACAC,IAAAA,UAAU,CAAC,MAAM;AACfR,MAAAA,QAAQ,CAACI,mBAAmB,CAAC,EAAD,CAApB,CAAR;AACAJ,MAAAA,QAAQ,CAACS,UAAU,CAAC,KAAD,CAAX,CAAR;AACD,KAHS,EAGP,GAHO,CAAV;AAIA;AACD;;AACD,MAAIC,gBAAgB,GAClBX,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuB,CAAvB,GACIQ,QADJ,GAEKZ,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,KAAyB,CAAzB,IAA8B,OAAOJ,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAAP,KAA4B,SAA3D,IACA,CAACA,UAAU,CAAC,CAAD,CAAV,CAAcI,MADf,GAEAS,kBAFA,GAGAb,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,KAAyB,CAAzB,IAA8B,OAAOJ,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAAP,KAA4B,SAA1D,GACAc,gBADA,GAEAT,mBARN;AASAJ,EAAAA,QAAQ,CAACU,gBAAgB,CAACX,UAAU,CAACe,KAAX,EAAD,CAAjB,CAAR;AACAN,EAAAA,UAAU,CAAC,MAAM;AACfV,IAAAA,cAAc,CAACC,UAAD,EAAaC,QAAb,EAAuBC,KAAvB,EAA8BC,KAA9B,CAAd;AACD,GAFS,EAEPA,KAFO,CAAV;AAGD;AACD,MAAMa,aAAa,GAAG,EAAtB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAML,QAAQ,GAAGlB,YAAY,CAACuB,SAAD,CAA7B;AAEA,MAAMf,KAAK,GAAGP,aAAa,CACzB;AACEsB,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAC/B,WAAOA,OAAP;AACD;AAHH,CADyB,EAMzBH,aANyB,CAA3B;AASA,MAAMI,qBAAqB,GAAG,uBAA9B;AACA,MAAMf,mBAAmB,GAAGX,YAAY,CAAC0B,qBAAD,CAAxC;AAEA,MAAMC,gBAAgB,GAAG1B,aAAa,CACpC;AACEyB,EAAAA,qBAAqB,EAAE,CAACF,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAC3C,WAAOA,OAAP;AACD;AAHH,CADoC,EAMpCH,aANoC,CAAtC;AASA,MAAMM,oBAAoB,GAAG,sBAA7B;AACA,MAAMT,kBAAkB,GAAGnB,YAAY,CAAC4B,oBAAD,CAAvC;AAEA,MAAMC,eAAe,GAAG5B,aAAa,CACnC;AACE2B,EAAAA,oBAAoB,EAAE,CAACJ,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAC1C,QAAIA,OAAO,CAACf,MAAZ,EAAoB;AAClB,aAAOc,KAAK,CAACM,MAAN,CAAaL,OAAb,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;AAPH,CADmC,EAUnCH,aAVmC,CAArC;AAaA,MAAMS,WAAW,GAAG,aAApB;AACA,MAAMf,UAAU,GAAGhB,YAAY,CAAC+B,WAAD,CAA/B;AAEA,MAAMC,SAAS,GAAG/B,aAAa,CAC7B;AACE8B,EAAAA,WAAW,EAAE,CAACP,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AACjC,WAAOA,OAAP;AACD;AAHH,CAD6B,EAM7BH,aAN6B,CAA/B;AASA,MAAMW,kBAAkB,GAAG,oBAA3B;AACA,MAAMb,gBAAgB,GAAGpB,YAAY,CAACiC,kBAAD,CAArC;AAEA,MAAMC,aAAa,GAAGjC,aAAa,CACjC;AACEgC,EAAAA,kBAAkB,EAAE,CAACT,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AACxC,QAAIA,OAAO,CAACf,MAAZ,EAAoB;AAClB,aAAOc,KAAK,CAACM,MAAN,CAAaL,OAAb,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;AAPH,CADiC,EAUjCH,aAViC,CAAnC","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nexport function handleDispatch(toDispatch, dispatch, array, speed) {\n  if (!toDispatch.length) {\n    dispatch(setCurrentHeapThree(array.map((num, index) => index)));\n    setTimeout(() => {\n      dispatch(setCurrentHeapThree([]));\n      dispatch(setRunning(false));\n    }, 900);\n    return;\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? setArray\n      : (toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') ||\n        !toDispatch[0].length\n      ? setCurrentSwappers\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? setCurrentSorted\n      : setCurrentHeapThree;\n  dispatch(dispatchFunction(toDispatch.shift()));\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed);\n  }, speed);\n}\nconst initialState1 = [];\nconst SET_ARRAY = 'SET_ARRAY';\nconst setArray = createAction(SET_ARRAY);\n\nconst array = handleActions(\n  {\n    SET_ARRAY: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_HEAPTHREE = 'SET_CURRENT_HEAPTHREE';\nconst setCurrentHeapThree = createAction(SET_CURRENT_HEAPTHREE);\n\nconst currentHeapThree = handleActions(\n  {\n    SET_CURRENT_HEAPTHREE: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SWAPPERS = 'SET_CURRENT_SWAPPERS';\nconst setCurrentSwappers = createAction(SET_CURRENT_SWAPPERS);\n\nconst currentSwappers = handleActions(\n  {\n    SET_CURRENT_SWAPPERS: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n\nconst SET_RUNNING = 'SET_RUNNING';\nconst setRunning = createAction(SET_RUNNING);\n\nconst isRunning = handleActions(\n  {\n    SET_RUNNING: (state, {payload}) => {\n      return payload;\n    },\n  },\n  initialState1,\n);\n\nconst SET_CURRENT_SORTED = 'SET_CURRENT_SORTED';\nconst setCurrentSorted = createAction(SET_CURRENT_SORTED);\n\nconst currentSorted = handleActions(\n  {\n    SET_CURRENT_SORTED: (state, {payload}) => {\n      if (payload.length) {\n        return state.concat(payload);\n      } else {\n        return [];\n      }\n    },\n  },\n  initialState1,\n);\n"]},"metadata":{},"sourceType":"module"}