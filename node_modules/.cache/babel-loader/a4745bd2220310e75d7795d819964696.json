{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { heapSort } from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport { selectSort } from '../sortingAlgorithms/algorithm/selectSort';\nimport { quickSort } from '../sortingAlgorithms/algorithm/quickSort'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 300; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 10; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'gray'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(3, 87));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  animationFunction(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              barTwoIdx = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style; // @ts-ignore\n\n          arrayBars[barOneIdx].innerText = newHeight;\n          barOneStyle.height = \"\".concat(newHeight * 4, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    this.animationFunction(animations);\n  }\n\n  selectSort() {\n    const animations = selectSort(this.state.array);\n    this.animationFunction(animations);\n  }\n\n  quickSort() {\n    console.log('array --> ', this.state.array);\n    const animation = quickSort(this.state.array, 0, this.state.array.length);\n    console.log(animation); // for (let i = 0; i < animations.length; i++) {\n    //   const arrayBars = document.getElementsByClassName('array-bar');\n    //   const isColorChange = i % 3 !== 2;\n    //   if (isColorChange) {\n    //     const [barOneIdx, barTwoIdx, pivot] = animations[i];\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n    //     const barPivoStyle = arrayBars[pivot].style;\n    //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //     setTimeout(() => {\n    //       barPivoStyle.backgroundColor = 'yellow';\n    //       barOneStyle.backgroundColor = color;\n    //       barTwoStyle.backgroundColor = color;\n    //     }, i * ANIMATION_SPEED_MS);\n    //   } else {\n    //     setTimeout(() => {\n    //       const [barOneIdx, newHeight, pivot] = animations[i];\n    //       const barPivoStyle = arrayBars[pivot].style;\n    //       barPivoStyle.backgroundColor = 'yellow';\n    //       const barOneStyle = arrayBars[barOneIdx].style;\n    //       // @ts-ignore\n    //       arrayBars[barOneIdx].innerText = newHeight;\n    //       barOneStyle.height = `${newHeight * 4}px`;\n    //     }, i * ANIMATION_SPEED_MS);\n    //   }\n    // }\n  }\n\n  heapSort() {\n    let arraySorted = this.state.array.slice().sort((a, b) => a - b);\n  }\n\n  bubbleSort() {} // We leave it as an exercise to the viewer of this code to implement this method.\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 10; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice()); //   console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value * 4, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, value))), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.selectSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"selection Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Bubble Sort\")));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Youssef/Desktop/Cr/visialisation/sorting-visualisation/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","heapSort","selectSort","quickSort","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","animationFunction","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","innerText","height","mergeSort","console","log","animation","arraySorted","slice","sort","a","b","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","mergeSortedArray","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {heapSort} from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport {selectSort} from '../sortingAlgorithms/algorithm/selectSort';\nimport {quickSort} from '../sortingAlgorithms/algorithm/quickSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 300;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'gray';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(3, 87));\n    }\n    this.setState({array});\n  }\n\n  animationFunction(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          // @ts-ignore\n          arrayBars[barOneIdx].innerText = newHeight;\n          barOneStyle.height = `${newHeight * 4}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    this.animationFunction(animations);\n  }\n  selectSort() {\n    const animations = selectSort(this.state.array);\n    this.animationFunction(animations);\n  }\n  quickSort() {\n    console.log('array --> ', this.state.array);\n    const animation = quickSort(this.state.array, 0, this.state.array.length);\n    console.log(animation);\n    // for (let i = 0; i < animations.length; i++) {\n    //   const arrayBars = document.getElementsByClassName('array-bar');\n    //   const isColorChange = i % 3 !== 2;\n    //   if (isColorChange) {\n    //     const [barOneIdx, barTwoIdx, pivot] = animations[i];\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n    //     const barPivoStyle = arrayBars[pivot].style;\n    //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //     setTimeout(() => {\n    //       barPivoStyle.backgroundColor = 'yellow';\n    //       barOneStyle.backgroundColor = color;\n    //       barTwoStyle.backgroundColor = color;\n    //     }, i * ANIMATION_SPEED_MS);\n    //   } else {\n    //     setTimeout(() => {\n    //       const [barOneIdx, newHeight, pivot] = animations[i];\n    //       const barPivoStyle = arrayBars[pivot].style;\n    //       barPivoStyle.backgroundColor = 'yellow';\n    //       const barOneStyle = arrayBars[barOneIdx].style;\n    //       // @ts-ignore\n    //       arrayBars[barOneIdx].innerText = newHeight;\n    //       barOneStyle.height = `${newHeight * 4}px`;\n    //     }, i * ANIMATION_SPEED_MS);\n    //   }\n    // }\n  }\n\n  heapSort() {\n    let arraySorted = this.state.array.slice().sort((a, b) => a - b);\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 10; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      //   console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n    return (\n      <div>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value * 4}px`,\n              }}>\n              {value}\n            </div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.selectSort()}>selection Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          {/* <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}