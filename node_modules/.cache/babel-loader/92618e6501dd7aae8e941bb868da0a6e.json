{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Youssef\\\\Desktop\\\\Cr\\\\visialisation\\\\sorting-visualisation\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{getMergeSortAnimations}from'../sortingAlgorithms/sortingAlgorithms.js';import{heapSort}from'../sortingAlgorithms/heapSort.js';import'./SortingVisualizer.css';import{selectSort}from'../sortingAlgorithms/algorithm/selectSort';// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS=300;// Change this value for the number of bars (value) in the array.\nvar NUMBER_OF_ARRAY_BARS=10;// This is the main color of the array bars.\nvar PRIMARY_COLOR='blue';// This is the color of array bars that are being compared throughout the animations.\nvar SECONDARY_COLOR='red';var SortingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(SortingVisualizer,_React$Component);function SortingVisualizer(props){var _this;_classCallCheck(this,SortingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(SortingVisualizer).call(this,props));_this.state={array:[]};return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.resetArray();}},{key:\"resetArray\",value:function resetArray(){var array=[];for(var i=0;i<NUMBER_OF_ARRAY_BARS;i++){array.push(randomIntFromInterval(5,500));}this.setState({array:array});}},{key:\"mergeSort\",value:function mergeSort(){var animations=getMergeSortAnimations(this.state.array);var _loop=function _loop(i){var arrayBars=document.getElementsByClassName('array-bar');var isColorChange=i%3!==2;if(isColorChange){var _animations$i=_slicedToArray(animations[i],2),barOneIdx=_animations$i[0],barTwoIdx=_animations$i[1];var barOneStyle=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=i%3===0?SECONDARY_COLOR:PRIMARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else{setTimeout(function(){var _animations$i2=_slicedToArray(animations[i],2),barOneIdx=_animations$i2[0],newHeight=_animations$i2[1];var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(newHeight,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop(i);}}},{key:\"quickSort\",value:function quickSort(){// We leave it as an exercise to the viewer of this code to implement this method.\n}},{key:\"heapSort\",value:function heapSort(){var arraySorted=this.state.array.slice().sort(function(a,b){return a-b;});}},{key:\"bubbleSort\",value:function bubbleSort(){}// We leave it as an exercise to the viewer of this code to implement this method.\n// NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\n},{key:\"testSortingAlgorithms\",value:function testSortingAlgorithms(){for(var i=0;i<10;i++){var array=[];var length=randomIntFromInterval(1,1000);for(var _i=0;_i<length;_i++){array.push(randomIntFromInterval(-1000,1000));}var javaScriptSortedArray=array.slice().sort(function(a,b){return a-b;});var mergeSortedArray=getMergeSortAnimations(array.slice());//   console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n}}},{key:\"render\",value:function render(){var _this2=this;var array=this.state.array;return React.createElement(\"div\",null,React.createElement(\"div\",{className:\"array-container\"},array.map(function(value,idx){return React.createElement(\"div\",{className:\"array-bar\",key:idx,style:{backgroundColor:PRIMARY_COLOR,height:\"\".concat(value,\"px\")}});})),React.createElement(\"div\",{className:\"buttons\"},React.createElement(\"button\",{onClick:function onClick(){return _this2.resetArray();}},\"Generate New Array\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.mergeSort();}},\"Merge Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.quickSort();}},\"Quick Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.heapSort();}},\"Heap Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.bubbleSort();}},\"Bubble Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.testSortingAlgorithms();}},\"Test Sorting Algorithms (BROKEN)\")));}}]);return SortingVisualizer;}(React.Component);// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport{SortingVisualizer as default};function randomIntFromInterval(min,max){// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}function arraysAreEqual(arrayOne,arrayTwo){if(arrayOne.length!==arrayTwo.length)return false;for(var i=0;i<arrayOne.length;i++){if(arrayOne[i]!==arrayTwo[i]){return false;}}return true;}","map":{"version":3,"sources":["C:/Users/Youssef/Desktop/Cr/visialisation/sorting-visualisation/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","heapSort","selectSort","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","array","resetArray","i","push","randomIntFromInterval","setState","animations","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","length","arraySorted","slice","sort","a","b","javaScriptSortedArray","mergeSortedArray","map","value","idx","mergeSort","quickSort","bubbleSort","testSortingAlgorithms","Component","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {heapSort} from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport {selectSort} from '../sortingAlgorithms/algorithm/selectSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 300;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'blue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    let arraySorted = this.state.array.slice().sort((a, b) => a - b);\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 10; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      //   console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}